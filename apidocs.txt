Docs

GET
/allrooms

Params: none

Returns: JSON Map:
buildings:
    array of:
        name: <name of building>
        rooms:
            array of:
                name: <name of room>
                id: <id of room>
                address: <address of room>
                seats: <num seats in room>
                building: <name of building>
                current: <current occurrence in room>
                chatRoomId: <id of chat room, chat room websocket location can be queried with /room/<id>>
                onlineUsers: <num of users in the room>

GET
/searchrooms

Params:
    q: string query

Returns: JSON Map:
query: <your query>
rooms:
    array of:
        name: <name of room>
        id: <id of room>
        address: <address of room>
        seats: <num seats in room>
        building: <name of building>
        current: <current occurrence in room>
        chatRoomId: <id of chat room, chat room websocket location can be queried with /room/<id>>
        onlineUsers: <num of users in the room>

WEBSOCKET


    Websocket URL: wss://<url>/chatsocket
WebSocket messages format is JSON

WebSocket messages are tables, they always contain a parameter "type" to distinguish the message type
There are WebSocket messages that you can send and ones that the server sends to you.
We'll start with the ones that you can send.

MESSAGES THAT YOU CAN SEND

    LOGIN MESSAGE

"type": "login"

Send when you want to login to a room.

    Params

"room": # ID of the room that you're trying to login to (you should get that from the /allrooms or /searchrooms query (String)
"username": # Your desired username (String)
optional:
    "user-id" # (BigInteger) Your public user ID (RSA public key) - If you want to identify yourself. See CHALLENGE & RESPONSE LOGIN
    "challenge-response" # (String) Response to your challenge

    Example
{
    "type": "login",
    "room": "abc123",
    "username": "Supergrobi"
    "user-id": <your public string>
    "challenge-response": <your challenge response> (base64)
}

    CHAT MESSAGE

Send when you are logged in to a room, and want to send a text message.

"type": "message"

    Params

"message": # The message you want to send (String)

    IMAGE MESSAGE

Send when you are logged in to a room, and want to send a text message.

"type": "image"

    Params

"image": # The image you want to send (Base64)


MESSAGES THAT CAN BE SENT TO YOU


    ERROR MESSAGE

"type": "error"

Sent when there's an error.

    Params

"reason": # Human-readable message of what happened (String)
"id": # ID of the error


    CHAT MESSAGE

"type": "message"

Sent when someone wrote something.

    Params

"username": # Username of the author
"user-id" # Static user ID of author
"message": # The message (String)
"time": # The time (in millis of day) of the message

    IMAGE MESSAGE

"type": "image"

Sent when someone sent an image.

    Params

"username": # Username of the author
"user-id" # Static user ID of author
"image": # The image (Base64 encoding, JPG or PNG)
"time": # The time (in millis of day) of the message

    LOGIN INFO MESSAGE

"type": "info-login"

Sent when someone logged into your room

    Params

"username": # Username of the person that logged in
"user-id" # Static user id of this person


    LOGOUT INFO MESSAGE

"type": "info-logout"

Sent when someone logged out of your room

    Params

"username": # Username of the person that logged out
"user-id" # Static user id of this person

    CHALLENGE-RESPONSE AUTHENTICATION

To achieve unique and unfakable ids, challenge-and-response authentication is used.

Step 1: The user creates an RSA private & public key.
Step 2: The user sends their public key to the server.
Step 3: The server generates a random string and encrypts it with the user's public key.
Step 4: To prove that the user owns the private key associated to their public key, the server sends that
string to the user to be decrypted using their private key.
Step 5: The user sends the decrypted string (which should be the original random string) back to the server.
Step 6: The server checks if the returned string matches with the original string. If yes, we are done.

For a code example, see src/test/java/me.glatteis.unichat.chat/UserIdentificationTest.java

To login with a private/public RSA key pair:

1. Send a message with type challenge:
{
    "type": "challenge",
    "user-id": <your public key modulus>
}

2. You will receive this message:
You will receive this message:
{
    "type": "challenge"
    "challenge": <challenge string> (base64)
}
Decode challenge to a byte array and decrypt it with your private key. Encode the result in base64 and send it with
the login message.
